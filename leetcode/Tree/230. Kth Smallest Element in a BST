/*
  The below method uses DFS, simple and common, but you can still be familiar with iteration method
*/
class Solution {
public:
    void dfsHelper (TreeNode* node, int k, int &count, int &res, bool &found) {
        if (!node || found) return;
        dfsHelper (node->left, k, count, res, found);
        count++;
        if (count==k) {
            res = node->val;
            found = true;
            return;
        }
        dfsHelper (node->right, k, count, res, found);
    }
    
    int kthSmallest(TreeNode* root, int k) {

        int res = 0;
        int count = 0;
        bool found = false;
        dfsHelper (root, k, count, res, found);
        return res;
    }
};


/*
  The below method uses stack to iterate
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int count = 0;
        stack<TreeNode*> st;
        TreeNode *node = root;

        while ( !st.empty() || node ) {
            
            while(node) {
                st.push(node);
                node = node->left;
            }

            node = st.top();
            st.pop();
            count++;

            if (count == k) {
                return node->val;
            }

            node = node->right;
            
        }

        return -1;
    }
};
